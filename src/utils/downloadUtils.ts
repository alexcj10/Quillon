import { Note } from '../types';

interface DownloadOptions {
  format: 'txt' | 'pdf';
  suggestedName?: string;
}

// Utility function to create and trigger download
function triggerDownload(blob: Blob, fileName: string) {
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = fileName;
  link.style.display = 'none';
  
  // Add to DOM, click, and remove
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  
  // Clean up the URL object
  setTimeout(() => URL.revokeObjectURL(url), 100);
}

// Generate PDF content as HTML that can be printed to PDF
function generatePDFContent(note: Note): string {
  const createdDate = new Date(note.createdAt).toLocaleDateString();
  const updatedDate = note.updatedAt !== note.createdAt ? new Date(note.updatedAt).toLocaleDateString() : null;
  
  return `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${note.title || 'Untitled Note'}</title>
    <style>
        @page {
            margin: 0.75in;
            size: A4;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            background: white;
        }
        
        .document {
            max-width: 100%;
            margin: 0;
            padding: 20px;
        }
        
        .header {
            border-bottom: 2px solid #e0e0e0;
            padding-bottom: 15px;
            margin-bottom: 25px;
        }
        
        .title {
            font-size: 28px;
            font-weight: bold;
            color: #2c3e50;
            margin-bottom: 10px;
            word-wrap: break-word;
        }
        
        .metadata {
            font-size: 14px;
            color: #7f8c8d;
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
        }
        
        .metadata-item {
            display: flex;
            align-items: center;
            gap: 5px;
        }
        
        .content {
            font-size: 16px;
            line-height: 1.8;
            white-space: pre-wrap;
            word-wrap: break-word;
            margin-bottom: 25px;
            min-height: 100px;
        }
        
        .tags-section {
            border-top: 1px solid #e0e0e0;
            padding-top: 15px;
            margin-top: 25px;
        }
        
        .tags-label {
            font-weight: bold;
            color: #34495e;
            margin-bottom: 8px;
        }
        
        .tags {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
        }
        
        .tag {
            background: #ecf0f1;
            color: #2c3e50;
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 14px;
            border: 1px solid #bdc3c7;
        }
        
        .footer {
            margin-top: 40px;
            padding-top: 15px;
            border-top: 1px solid #e0e0e0;
            font-size: 12px;
            color: #95a5a6;
            text-align: center;
        }
        
        @media print {
            body {
                -webkit-print-color-adjust: exact;
                print-color-adjust: exact;
            }
            
            .document {
                padding: 0;
            }
        }
    </style>
</head>
<body>
    <div class="document">
        <div class="header">
            <div class="title">${note.title || 'Untitled Note'}</div>
            <div class="metadata">
                <div class="metadata-item">
                    <strong>Created:</strong> ${createdDate}
                </div>
                ${updatedDate ? `<div class="metadata-item"><strong>Updated:</strong> ${updatedDate}</div>` : ''}
                ${note.isPrivate ? '<div class="metadata-item"><strong>Status:</strong> Private</div>' : ''}
                ${note.isFavorite ? '<div class="metadata-item"><strong>â˜…</strong> Favorite</div>' : ''}
            </div>
        </div>
        
        <div class="content">${note.content || 'No content available.'}</div>
        
        ${note.tags && note.tags.length > 0 ? `
        <div class="tags-section">
            <div class="tags-label">Tags:</div>
            <div class="tags">
                ${note.tags.map(tag => `<span class="tag">${tag}</span>`).join('')}
            </div>
        </div>
        ` : ''}
        
        <div class="footer">
            Generated by Quillon Notes on ${new Date().toLocaleDateString()}
        </div>
    </div>
</body>
</html>`;
}

export async function downloadNote(note: Note, options: DownloadOptions) {
  const { format, suggestedName } = options;
  
  // Create filename with timestamp
  const timestamp = new Date().toISOString().slice(0, 19).replace(/[:.]/g, '-');
  const noteTitle = note.title ? note.title.replace(/[^a-zA-Z0-9\s]/g, '').replace(/\s+/g, '-') : 'untitled';
  const defaultFileName = suggestedName || `${noteTitle}-${timestamp}`;
  const fileName = `${defaultFileName}.${format}`;
  
  try {
    if (format === 'txt') {
      // Generate TXT content with proper formatting
      const txtContent = [
        note.title || 'Untitled Note',
        '='.repeat((note.title || 'Untitled Note').length),
        '',
        `Created: ${new Date(note.createdAt).toLocaleDateString()}`,
        note.updatedAt !== note.createdAt ? `Updated: ${new Date(note.updatedAt).toLocaleDateString()}` : '',
        note.isPrivate ? 'Status: Private' : '',
        note.isFavorite ? 'Favorite: Yes' : '',
        '',
        'Content:',
        '-'.repeat(50),
        note.content || 'No content available.',
        '',
        note.tags && note.tags.length > 0 ? `Tags: ${note.tags.join(', ')}` : '',
        '',
        `Generated by Quillon Notes on ${new Date().toLocaleDateString()}`
      ].filter(line => line !== '').join('\n');
      
      const blob = new Blob([txtContent], { type: 'text/plain;charset=utf-8' });
      triggerDownload(blob, fileName);
      
    } else if (format === 'pdf') {
      // Generate HTML content for PDF
      const htmlContent = generatePDFContent(note);
      
      // Create a new window for PDF generation
      const printWindow = window.open('', '_blank', 'width=800,height=600,scrollbars=yes,resizable=yes');
      
      if (!printWindow) {
        throw new Error('Popup blocked. Please allow popups for this site to download PDFs.');
      }
      
      // Write content and set up print
      printWindow.document.write(htmlContent);
      printWindow.document.close();
      
      // Wait for content to load, then trigger print
      printWindow.onload = () => {
        setTimeout(() => {
          printWindow.focus();
          printWindow.print();
          
          // Close window after print dialog
          printWindow.onafterprint = () => {
            setTimeout(() => printWindow.close(), 100);
          };
          
          // Fallback: close after 30 seconds if print dialog is cancelled
          setTimeout(() => {
            if (!printWindow.closed) {
              printWindow.close();
            }
          }, 30000);
        }, 500);
      };
    }
    
    console.log(`Successfully initiated ${format.toUpperCase()} download for: ${fileName}`);
    
  } catch (error) {
    console.error(`Failed to download ${format.toUpperCase()}:`, error);
    
    // Show user-friendly error message
    const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
    alert(`Download failed: ${errorMessage}\n\nPlease try again or contact support if the issue persists.`);
  }
}